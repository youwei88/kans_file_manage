<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"  
    xmlns:beans="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd  
                        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd">  
	
	
	<http pattern="/api/transferOAFile" security="none" />
    <http pattern="/images/**/**" security="none" />  
	<http pattern="/css/**/**" security="none"/> 
	<http pattern="/js/**/**" security="none"/>
	<!-- <http pattern="/jsp/**/**" security="none"/> -->
	
	<http pattern="/jsp/login/login.jsp" security="none"/>
	
	<!--  Spring-Security 的配置 -->
	<!-- 注意use-expressions=true.表示开启表达式,否则表达式将不可用.
	see:http://www.family168.com/tutorial/springsecurity3/html/el-access.html
	 -->
	<http auto-config="true" use-expressions="true" access-denied-page="/auth/denied" >
		
		
		
		<intercept-url pattern="/user/**" access="permitAll"/>
		<intercept-url pattern="/imageCode/**" access="permitAll"/>
		<intercept-url pattern="/auth/login" access="permitAll"/>
		<!-- <intercept-url pattern="/main/admin" access="hasRole('ROLE_ADMIN')"/> -->
		<intercept-url pattern="/**/**" access="hasRole('ROLE_USER')"/>
		
		<form-login
				login-page="/auth/login" 
				authentication-failure-url="/auth/login?error=true" 
				default-target-url="/index/index"/>
			
		<logout 
				invalidate-session="true" 
				logout-success-url="/auth/login" 
				logout-url="/j_spring_security_logout"/>
				
	
	<!-- session 超时跳转 -->
	<session-management invalid-session-url="/auth/login"> </session-management>
	
	</http>
	
	
	
	<!-- 指定一个自定义的authentication-manager :customUserDetailsService -->
	<authentication-manager>
	        <authentication-provider user-service-ref="customUserDetailsService">
	        		<password-encoder ref="passwordEncoder"/>
	        </authentication-provider>
	</authentication-manager>
	
	<!-- 对密码进行MD5编码 -->
	<beans:bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/>
	
	

	<!-- 
		通过 customUserDetailsService,Spring会自动的用户的访问级别.
		也可以理解成:以后我们和数据库操作就是通过customUserDetailsService来进行关联.
	 -->
	<beans:bean id="customUserDetailsService" class="service.CustomUserDetailsService"/>
	
</beans:beans>
